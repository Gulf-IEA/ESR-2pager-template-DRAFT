dpi = 300,
units = "in",
device = ragg::agg_png(bg = "white"))
plt +
ggplot2::guides(shape = "none"#,
# color = ggplot2::guide_legend(ncol = 3)
) +
ggplot2::theme(aspect.ratio = 0.4,
# legend.position = "bottom",
# legend.direction = "horizontal",
legend.box = "horizontal",
legend.title = ggplot2::element_blank(),
# legend.byrow = TRUE,
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2),
legend.background = ggplot2::element_rect(fill = NULL, color = NULL)) +
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
plt +
ggplot2::guides(shape = "none"#,
# color = ggplot2::guide_legend(ncol = 3)
) +
ggplot2::theme(aspect.ratio = 0.4,
# legend.position = "bottom",
# legend.direction = "horizontal",
# legend.box = "horizontal",
legend.title = ggplot2::element_blank(),
# legend.byrow = TRUE,
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2)) +
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
ggplot2::ggsave(here::here("images/new_condition.png"),
width = 6,
height = 3.25,
dpi = 300,
units = "in",
device = ragg::agg_png(bg = "white"))
plt +
ggplot2::guides(shape = "none"#,
# color = ggplot2::guide_legend(ncol = 3)
) +
ggplot2::theme(#aspect.ratio = 0.4,
# legend.position = "bottom",
# legend.direction = "horizontal",
# legend.box = "horizontal",
legend.title = ggplot2::element_blank(),
# legend.byrow = TRUE,
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2)) +
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
ggplot2::ggsave(here::here("images/new_condition.png"),
width = 6,
height = 3.25,
dpi = 300,
units = "in",
device = ragg::agg_png(bg = "white"))
plt +
ggplot2::guides(shape = "none"#,
# color = ggplot2::guide_legend(ncol = 3)
) +
ggplot2::theme(aspect.ratio = 0.6,
# legend.position = "bottom",
# legend.direction = "horizontal",
# legend.box = "horizontal",
legend.title = ggplot2::element_blank(),
# legend.byrow = TRUE,
plot.background = ggplot2::element_rect(color = "black",
linewidth = 2)) +
ggplot2::ylab("Relative condition") +
ggplot2::scale_y_continuous(breaks = seq(0.9, 1.05, by = 0.05),
limits = c(0.88, 1.05))
ggplot2::ggsave(here::here("images/new_condition.png"),
width = 6,
height = 3.25,
dpi = 300,
units = "in",
device = ragg::agg_png(bg = "white"))
ggplot2::ggsave(here::here("images/new_condition.png"),
width = 6,
height = 3,
dpi = 300,
units = "in",
device = ragg::agg_png(bg = "white"))
ggplot2::ggsave(here::here("images/new_condition.png"),
width = 6,
height = 2.5,
dpi = 300,
units = "in",
device = ragg::agg_png(bg = "white"))
ggplot2::ggsave(here::here("images/new_condition.png"),
width = 6,
height = 2.25,
dpi = 300,
units = "in",
device = ragg::agg_png(bg = "white"))
ggplot2::ggsave(here::here("images/new_condition.png"),
width = 6,
height = 2.3,
dpi = 300,
units = "in",
device = ragg::agg_png(bg = "white"))
ggplot2::ggsave(here::here("images/new_condition.png"),
width = 6,
height = 2.4,
dpi = 300,
units = "in",
device = ragg::agg_png(bg = "white"))
renv::snapshot()
renv::snapshot()
targets::tar_visnetwork()
install.packages("targets")
targets::tar_make()
install.packages("tarchetypes")
renv::snapshot()
renv::snapshot()
targets::tar_make()
targets::tar_make()
source(here::here("../READ-EDAB-NEesp2"))
source(here::here("../READ-EDAB-NEesp2"))
remotes::install_github("NEFSC/READ-EDAB-NEesp2")
remotes::install_github("NEFSC/READ-EDAB-NEesp2")
remotes::install_github("NEFSC/READ-EDAB-NEesp2", force = TRUE)
targets::tar_make()
targets::tar_make()
NEesp2::find_files("meta_data")
targets::tar_make()
NEesp2::create_rec_trips
remotes::install_github("NEFSC/READ-EDAB-NEesp2")
?install_github
remotes::install_github("NEFSC/READ-EDAB-NEesp2", ref = "abby_dev")
targets::tar_make()
NEesp2::create_rec_trips(files =  list.files(
path = here::here("../READ-EDAB-MRIP/inputs/Black_sea_bass_trips.Rds"),
full.names = TRUE
))
NEesp2::create_rec_trips
remotes::install_github("NEFSC/READ-EDAB-NEesp2", ref = "abby_dev")
NEesp2::create_rec_trips
remove.packages("NEesp2")
remotes::install_github("NEFSC/READ-EDAB-NEesp2", ref = "abby_dev")
NEesp2::create_rec_trips
remove.packages("NEesp2")
remotes::install_github("NEFSC/READ-EDAB-NEesp2", ref = "abby_dev")
NEesp2::create_rec_trips
NEesp2::create_rec_trips(files =  list.files(
path = here::here("../READ-EDAB-MRIP/inputs/Black_sea_bass_trips.Rds"),
full.names = TRUE
))
files <- list.files(
path = here::here("../READ-EDAB-MRIP/inputs/Black_sea_bass_trips.Rds"),
full.names = TRUE
)
files
files <- list.files(
path = here::here("../READ-EDAB-MRIP/inputs/Black_sea_bass_trips"),
full.names = TRUE
)
NEesp2::create_rec_trips(files =  list.files(
path = here::here("../READ-EDAB-MRIP/inputs/Black_sea_bass_trips"),
full.names = TRUE
))
remove.packages("NEesp2")
remotes::install_github("NEFSC/READ-EDAB-NEesp2", ref = "abby_dev")
NEesp2::create_rec_trips(files =  list.files(
path = here::here("../READ-EDAB-MRIP/inputs/Black_sea_bass_trips"),
full.names = TRUE
))
targets::tar_make()
targets::tar_make()
targets::tar_make()
risk_fig <- NEesp2::plot_risk(risk_elements = tibble::tibble(stock = c(4, 0, 2, 2),
recreational = c(1, 1, 1, 3),
commercial = c(1, 4, 2, 0)))
ggplot2::ggsave(risk_fig,
filename = here::here("images/risk_plot.png"),
width = 4,
height = 2.5,
dpi = 300)
targets::tar_load_everything()
comm_data
comm_data |> dplyr::filter(INDICATOR_NAME == "N_Commercial_Vessels_Landing_BLACK_SEABASS
")
unique(comm_data$INDICATOR_NAME)
comm_data |> dplyr::filter(INDICATOR_NAME == "N_Commercial_Vessels_Landing_BLACK_SEABASS")
comm_data |> dplyr::filter(INDICATOR_NAME == "N_Commercial_Vessels_Landing_BLACK_SEABASS") |> View()
all_data
unique(all_data$INDICATOR_NAME)
all_data |> dplyr::filter(INDICATOR_NAME == "BSB_Commercial_Vessels")
all_data |> dplyr::filter(INDICATOR_NAME == "BSB_Commercial_Vessels") |> View()
tarets::tar_make()
targets::tar_make()
install.packages("readxl")
targets::tar_make()
target::tar_make("all_data")
targets::tar_make("all_data")
targets::tar_invalidate("all_data")
target::tar_make()
targets::tar_make()
remotes::install_github("kshotwell/AKesp")
targets::tar_make()
targets::tar_make()
targets::tar_make()
targets::tar_invalidate("all_data")
targets::tar_make()
renv::snapshot()
?theme
targets::tar_make()
targets::tar_make()
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes) # Load other packages as needed.
remotes::install_github("NEFSC/READ-EDAB-NEesp2", ref = "abby_dev")
# Run the R scripts in the R/ folder with your custom functions:
tar_source("scripts/fig_functions.R")
tar_source("scripts/clean_data.R")
syear <- 2025
image_dir <- here::here("images")
txt_dir <- here::here("data")
risk_plt_file <- here::here("images/risk_plot.png")
if(!file.exists(risk_plt_file)) {
file.create(risk_plt_file)
}
# targets workflow
list(
# add the code to create this as its own target
# targets::tar_target(condition_img,
#   here::here("images/condition.jpg"),
#   format = "file"
# ),
#
#   targets::tar_target(risk_img,
#                       here::here("images/chart.png"),
#                       format = "file"),
source(here::here("scripts/targets_scripts/01_targets_read_files.R")),
source(here::here("scripts/targets_scripts/02_targets_create_indicators.R")),
source(here::here("scripts/targets_scripts/03_targets_format_data.R")),
source(here::here("scripts/targets_scripts/04_targets_create_plots.R")),
# add image file paths to table
targets::tar_target(
tbl_info,
NEesp2::add_fig_paths(
path = table_data,
list_files = c(
swv_plt,
bt_plt,
rec_trips_plt,
# rec_landings_plt,
com_rev_plt,
com_vessel_plt
)
)
) #,
## render report ----
# tarchetypes::tar_render(rpt_card,
#                         here::here("docs/bsb_report_card.qmd"),
#                         output_file = here::here("docs/targets_test.pdf"),
#                         params = list(tbl_file = tbl_info,
#                                       img1 = map_img,
#                                       # img2 = condition_img,
# img2 = cond_plt,
#                                       img3 = risk_img,
#                                       img_dir = here::here("images"))
#                         )
# tar_render issue seems to be associated with quarto or possibly pandoc?
# the .tex compiles in overleaf
# does not render direct from .qmd any more
)
devtools::install_github("NEFSC/READ-EDAB-NEesp2")
#devtools::install_github("NEFSC/READ-EDAB-NEesp2")
library("READ-EDAB-NEesp2")
install.packages("readxl")
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE)
#devtools::install_github("NEFSC/READ-EDAB-NEesp2")
library(NEesp2)
# here::i_am("inst/esp_template/06_docs/report card pg 1.qmd")
devtools::load_all("../READ-EDAB-NEesp2")
#devtools::load_all("../READ-EDAB-NEesp2")
risk_fig <- NEesp2::plot_risk(risk_elements = tibble::tibble(stock = c(4, 0, 2, 2),
recreational = c(1, 1, 1, 3),
commercial = c(1, 4, 2, 0)))
ggplot2::ggsave(risk_fig,
filename = here::here("images/risk_plot.png"),
width = 4,
height = 2.5,
dpi = 300)
data <- NEesp2::format_tbl_data(file = params$tbl_file,
term_year = params$terminal_year,
dir = params$img_dir)
params
View(params)
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE)
#devtools::install_github("NEFSC/READ-EDAB-NEesp2")
library(NEesp2)
# here::i_am("inst/esp_template/06_docs/report card pg 1.qmd")
#devtools::load_all("../READ-EDAB-NEesp2")
risk_fig <- NEesp2::plot_risk(risk_elements = tibble::tibble(stock = c(4, 0, 2, 2),
recreational = c(1, 1, 1, 3),
commercial = c(1, 4, 2, 0)))
ggplot2::ggsave(risk_fig,
filename = here::here("images/risk_plot.png"),
width = 4,
height = 2.5,
dpi = 300)
params
data <- NEesp2::format_tbl_data(file = params$tbl_file,
term_year = params$terminal_year,
dir = params$img_dir)
#devtools::load_all("../READ-EDAB-NEesp2")
risk_fig <- NEesp2::plot_risk(risk_elements = tibble::tibble(stock = c(4, 0, 2, 2),
recreational = c(1, 1, 1, 3),
commercial = c(1, 4, 2, 0)))
ggplot2::ggsave(risk_fig,
filename = here::here("images/risk_plot.png"),
width = 4,
height = 2.5,
dpi = 300)
tbl <- NEesp2::rpt_card_table(data,
widths = params$widths)
# No need to load NEesp2 package
# knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE) # Uncomment if you want these global knitr options
library(here) # For managing file paths consistently, though for direct paths, it's less critical.
library(flextable) # Essential for table creation
library(ggplot2) # Potentially needed if you add your own plots
library(NEesp2)
risk_fig <- NEesp2::plot_risk(risk_elements = tibble::tibble(stock = c(4, 0, 2, 2),
recreational = c(1, 1, 1, 3),
commercial = c(1, 4, 2, 0)))
ggplot2::ggsave(risk_fig,
filename = here::here("images/risk_plot.png"),
width = 4,
height = 2.5,
dpi = 300)
# Placeholder for your actual table data
# Replace this with your own data.frame or tibble
my_table_data <- data.frame(
Indicator = c(
"Mean winter (Feb-Mar) bottom temperature",
"Shelf water volume",
"Commercial Landings (MT)",
"Recreational Landings (MT)",
"Another Indicator",
"Yet Another Indicator"
),
`2023 Value` = c(8.5, 1200, 500, 300, 10, 25),
`2024 Value` = c(7.9, 1150, 520, 280, 12, 28),
`Time Series` = c(
"placeholder_temp.png",
"placeholder_volume.png",
"placeholder_comm.png",
"placeholder_rec.png",
"placeholder_indicator_a.png",
"placeholder_indicator_b.png"
),
stringsAsFactors = FALSE
)
# Function to embed images in a flextable column
# This function assumes images are in params$img_dir
# You'll need to create placeholder image files (e.g., png) in your 'images' folder
# for each of these. They can be empty or simple rectangles for now.
embed_image_in_cell <- function(value, image_dir) {
if (value %in% c("placeholder_temp.png", "placeholder_volume.png",
"placeholder_comm.png", "placeholder_rec.png",
"placeholder_indicator_a.png", "placeholder_indicator_b.png")) {
img_path <- file.path(image_dir, value)
if (file.exists(img_path)) {
flextable::as_image(src = img_path, width = 1, height = 0.5) # Adjust width/height as needed
} else {
flextable::as_paragraph("Image Missing!") # Placeholder if image file not found
}
} else {
flextable::as_paragraph(value) # If it's not an image filename, just print the text
}
}
tbl <- flextable(my_table_data)
# Set column widths using params$widths, or adjust manually
tbl <- flextable::width(tbl, j = 1, width = params$widths[1])
tbl <- flextable::width(tbl, j = 2, width = params$widths[2])
tbl <- flextable::width(tbl, j = 3, width = params$widths[3]) # This might be the `Time Series` column, adjust if needed
tbl <- flextable::width(tbl, j = 4, width = params$widths[4]) # This might be `Time Series` image column
# Set header labels
tbl <- flextable::set_header_labels(tbl, `Time Series` = "Time Series*")
# Apply font
tbl <- flextable::font(tbl, fontname = "Times New Roman", part = "body")
tbl <- flextable::font(tbl, fontname = "Times New Roman", part = "header")
# Add superscripts for specific rows/columns
# Note: These are hardcoded for row indices 1 and 2 based on your original example.
# You'll need to adjust these if your "Indicator" values change positions.
tbl <- flextable::compose(tbl,
part = "body",
i = 1,
j = "Indicator", # Target the "Indicator" column
value = flextable::as_paragraph("Mean winter (Feb-Mar) bottom temperature (\u00B0C)"))
tbl <- flextable::compose(tbl,
part = "body",
i = 2,
j = "Indicator", # Target the "Indicator" column
value = flextable::as_paragraph("Shelf water volume (km",
flextable::as_sup("3"),
")"))
# Embed images in the "Time Series" column
# This uses lapply to apply the embed_image_in_cell function to each cell
tbl <- flextable::compose(tbl, j = "Time Series", value = flextable::as_paragraph(
lapply(my_table_data$`Time Series`, function(x) embed_image_in_cell(x, params$img_dir))
))
# Placeholder for your actual table data
# Replace this with your own data.frame or tibble
my_table_data <- data.frame(
Indicator = c(
"Mean winter (Feb-Mar) bottom temperature",
"Shelf water volume",
"Commercial Landings (MT)",
"Recreational Landings (MT)",
"Another Indicator",
"Yet Another Indicator"
),
`2023 Value` = c(8.5, 1200, 500, 300, 10, 25),
`2024 Value` = c(7.9, 1150, 520, 280, 12, 28),
`Time Series` = c(
"placeholder_temp.png",
"placeholder_volume.png",
"placeholder_comm.png",
"placeholder_rec.png",
"placeholder_indicator_a.png",
"placeholder_indicator_b.png"
),
stringsAsFactors = FALSE
)
my_table_data
View(my_table_data)
# Placeholder for your actual table data
# Replace this with your own data.frame or tibble
my_table_data <- data.frame(
Indicator = c(
"Mean winter (Feb-Mar) bottom temperature",
"Shelf water volume",
"Commercial Landings (MT)",
"Recreational Landings (MT)",
"Another Indicator",
"Yet Another Indicator"
),
`2023 Value` = c(8.5, 1200, 500, 300, 10, 25),
`2024 Value` = c(7.9, 1150, 520, 280, 12, 28),
`Time Series` = c(
"placeholder_temp.png",
"placeholder_volume.png",
"placeholder_comm.png",
"placeholder_rec.png",
"placeholder_indicator_a.png",
"placeholder_indicator_b.png"
),
stringsAsFactors = FALSE
)
# Function to embed images in a flextable column
# This function assumes images are in params$img_dir
# You'll need to create placeholder image files (e.g., png) in your 'images' folder
# for each of these. They can be empty or simple rectangles for now.
embed_image_in_cell <- function(value, image_dir) {
if (value %in% c("placeholder_temp.png", "placeholder_volume.png",
"placeholder_comm.png", "placeholder_rec.png",
"placeholder_indicator_a.png", "placeholder_indicator_b.png")) {
img_path <- file.path(image_dir, value)
if (file.exists(img_path)) {
flextable::as_image(src = img_path, width = 1, height = 0.5) # Adjust width/height as needed
} else {
flextable::as_paragraph("Image Missing!") # Placeholder if image file not found
}
} else {
flextable::as_paragraph(value) # If it's not an image filename, just print the text
}
}
tbl <- flextable(my_table_data)
# Set column widths using params$widths, or adjust manually
tbl <- flextable::width(tbl, j = 1, width = params$widths[1])
tbl <- flextable::width(tbl, j = 2, width = params$widths[2])
tbl <- flextable::width(tbl, j = 3, width = params$widths[3]) # This might be the `Time Series` column, adjust if needed
tbl <- flextable::width(tbl, j = 4, width = params$widths[4]) # This might be `Time Series` image column
# Set header labels
tbl <- flextable::set_header_labels(tbl, `Time Series` = "Time Series*")
# Apply font
tbl <- flextable::font(tbl, fontname = "Times New Roman", part = "body")
tbl <- flextable::font(tbl, fontname = "Times New Roman", part = "header")
# Add superscripts for specific rows/columns
# Note: These are hardcoded for row indices 1 and 2 based on your original example.
# You'll need to adjust these if your "Indicator" values change positions.
tbl <- flextable::compose(tbl,
part = "body",
i = 1,
j = "Indicator", # Target the "Indicator" column
value = flextable::as_paragraph("Mean winter (Feb-Mar) bottom temperature (\u00B0C)"))
tbl <- flextable::compose(tbl,
part = "body",
i = 2,
j = "Indicator", # Target the "Indicator" column
value = flextable::as_paragraph("Shelf water volume (km",
flextable::as_sup("3"),
")"))
# Embed images in the "Time Series" column
# This uses lapply to apply the embed_image_in_cell function to each cell
tbl <- flextable::compose(tbl, j = "Time Series", value = lapply(my_table_data$Time.Series, function(x) embed_image_in_cell(x, params$img_dir)))
# Embed images in the "Time Series" column
# This uses lapply to apply the embed_image_in_cell function to each cell
tbl <- flextable::compose(tbl, j = "Time.Series", value = lapply(my_table_data$Time.Series, function(x) embed_image_in_cell(x, params$img_dir)))
tbl
