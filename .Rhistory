legend.box = "horizontal") +
viridis::scale_color_viridis(discrete = TRYE)
survEPUcond |>
dplyr::filter(Var == "Black sea bass") |>
dplyr::ungroup() |>
dplyr::arrange(Time) |>
dplyr::group_by(EPU) |>
dplyr::mutate(mean = mean(Value, na.rm = TRUE),
sd = sd(Value, na.rm = TRUE)) |>
ggplot2::ggplot(ggplot2::aes(x = Time,
y = Value,
# y = scaleCond[,1],
color = category,
shape = EPU
)) +
ggplot2::geom_path(color = "black", lty = 2, alpha = 0.5) +
ggplot2::geom_point(cex = 3) +
ggplot2::xlim(c(1989, 2024)) +
# ggplot2::facet_wrap(~EPU, ncol = 1) +
# ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_classic(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 16),
axis.title = ggplot2::element_blank(),
aspect.ratio = 0.4,
legend.direction = "vertical",
legend.box = "horizontal") +
viridis::scale_color_viridis(discrete = TRUE)
?knitr::kable
knitr::opts_chunk$set(echo = FALSE)
here::i_am("scripts/bsb_table_test.Rmd")
data <- readxl::read_excel(here::here("data-raw/test_table.xlsx"))
head(data)
data <- readxl::read_excel(here::here("data-raw/test_table.xlsx")) |>
dplyr::mutate(figure = paste0('![](`r here::here("images",', `Time Series`, '"winter bottom temp North_2025-02-10.png")`)'))
data
knitr::kable(data)
View(data)
data$figure
data <- readxl::read_excel(here::here("data-raw/test_table.xlsx")) |>
dplyr::mutate(figure = paste0('![](`r here::here("images",', `Time Series`)`)'))
data$figure
)
}}
data <- readxl::read_excel(here::here("data-raw/test_table.xlsx")) |>
janitor::clean_names() |>
dplyr::mutate(figure = paste0('![](`r here::here("images",', time_series))
data$figure
data <- readxl::read_excel(here::here("data-raw/test_table.xlsx")) |>
janitor::clean_names() |>
dplyr::mutate(figure = paste0('![](`r here::here("images",', time_series, ')`)'))
data$figure
data <- readxl::read_excel(here::here("data-raw/test_table.xlsx")) |>
janitor::clean_names() |>
dplyr::mutate(figure = paste0('![]('here::here("images", time_series)')'))
data <- readxl::read_excel(here::here("data-raw/test_table.xlsx")) |>
janitor::clean_names() |>
dplyr::mutate(figure = paste0('![](', here::here("images", time_series), ')'))
plt_bsb <- function(data) {
plt <- data |>
dplyr::group_by(INDICATOR_NAME) |>
dplyr::mutate(mean = mean(DATA_VALUE, na.rm = TRUE),
sd = sd(DATA_VALUE, na.rm = TRUE)) |>
ggplot2::ggplot(ggplot2::aes(x = YEAR,
y = DATA_VALUE
)) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean + .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean - .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_path() +
ggplot2::xlim(c(1989, 2024)) +
ggplot2::scale_x_continuous(breaks = c(1990, 2000, 2010, 2020, 2023)) +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_classic(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 16),
axis.title = ggplot2::element_blank(),
aspect.ratio = 1/4)
return(plt)
}
com_indicators
plt_bsb(com_indiactors |> dplyr::filter(INDICATOR_NAME = ))
com_indicators |> dplyr::select(INDICATOR_NAME)
com_indicators |> dplyr::select(INDICATOR_NAME) |> tail
com_indicators |> dplyr::select(INDICATOR_NAME) |> tail()
unique(com_indicators$INDICATOR_NAME)
plt_bsb(com_indiactors |> dplyr::filter(INDICATOR_NAME = "N_Commercial_Vessels_Landing_BLACK_SEABASS"))
plt_bsb(com_indicators |> dplyr::filter(INDICATOR_NAME = "N_Commercial_Vessels_Landing_BLACK_SEABASS"))
plt_bsb(com_indicators |> dplyr::filter(INDICATOR_NAME == "N_Commercial_Vessels_Landing_BLACK_SEABASS"))
plt_bsb(com_indicators |>
dplyr::arrange(YEAR) |>
dplyr::filter(INDICATOR_NAME == "N_Commercial_Vessels_Landing_BLACK_SEABASS"))
plt <- data |>
dplyr::group_by(INDICATOR_NAME) |>
dplyr::mutate(mean = mean(DATA_VALUE, na.rm = TRUE),
sd = sd(DATA_VALUE, na.rm = TRUE)) |>
ggplot2::ggplot(ggplot2::aes(x = YEAR,
y = DATA_VALUE
)) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean + .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean - .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_path() +
# ggplot2::xlim(c(1989, 2024)) +
ggplot2::scale_x_continuous(breaks = c(1990, 2000, 2010, 2020, 2023),
limits = c(1989, 2024)) +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_classic(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 16),
axis.title = ggplot2::element_blank(),
aspect.ratio = 1/4)
plt_bsb <- function(data) {
plt <- data |>
dplyr::group_by(INDICATOR_NAME) |>
dplyr::mutate(mean = mean(DATA_VALUE, na.rm = TRUE),
sd = sd(DATA_VALUE, na.rm = TRUE)) |>
ggplot2::ggplot(ggplot2::aes(x = YEAR,
y = DATA_VALUE
)) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean + .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean - .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_path() +
# ggplot2::xlim(c(1989, 2024)) +
ggplot2::scale_x_continuous(breaks = c(1990, 2000, 2010, 2020, 2023),
limits = c(1989, 2024)) +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_classic(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 16),
axis.title = ggplot2::element_blank(),
aspect.ratio = 1/4)
return(plt)
}
plt_bsb(com_indicators |>
dplyr::arrange(YEAR) |>
dplyr::filter(INDICATOR_NAME == "N_Commercial_Vessels_Landing_BLACK_SEABASS"))
all_indicators
unique(all_indicators$INDICATOR_NAME)
?theme
## plot ----
for(i in unique(all_indicators$INDICATOR_NAME)) {
this_dat <- all_indicators |>
dplyr::filter(INDICATOR_NAME == i) |>
dplyr::arrange(YEAR)
fname <- here::here("images", paste0(i, "_", Sys.Date(), ".png"))
if(max(this_dat$DATA_VALUE, na.rm = TRUE) > 10^6) {
this_dat <- this_dat |>
dplyr::mutate(DATA_VALUE = ifelse(!is.na(DATA_VALUE), DATA_VALUE/10^6, DATA_VALUE),
INDICATOR_NAME = paste(INDICATOR_NAME, "millions"))
fname <-  here::here("images", paste0(i, "_millions_", Sys.Date(), ".png"))
}
print(fname)
fig <- plt_bsb(this_dat)
if(stringr::str_detect(i, "North")) {
fig <- fig |>
ggplot2::labs(title = "North") +
ggplot2::theme(plot.title.position = "plot")
}
if(stringr::str_detect(i, "South")) {
fig <- fig |>
ggplot2::labs(title = "South") +
ggplot2::theme(plot.title.position = "plot")
}
ggsave(fname,
width = 6,
height = 2)
}
## plot ----
for(i in unique(all_indicators$INDICATOR_NAME)) {
this_dat <- all_indicators |>
dplyr::filter(INDICATOR_NAME == i) |>
dplyr::arrange(YEAR)
fname <- here::here("images", paste0(i, "_", Sys.Date(), ".png"))
if(max(this_dat$DATA_VALUE, na.rm = TRUE) > 10^6) {
this_dat <- this_dat |>
dplyr::mutate(DATA_VALUE = ifelse(!is.na(DATA_VALUE), DATA_VALUE/10^6, DATA_VALUE),
INDICATOR_NAME = paste(INDICATOR_NAME, "millions"))
fname <-  here::here("images", paste0(i, "_millions_", Sys.Date(), ".png"))
}
print(fname)
fig <- plt_bsb(this_dat)
if(stringr::str_detect(i, "North")) {
fig <- fig +
ggplot2::labs(title = "North") +
ggplot2::theme(plot.title.position = "plot")
}
if(stringr::str_detect(i, "South")) {
fig <- fig +
ggplot2::labs(title = "South") +
ggplot2::theme(plot.title.position = "plot")
}
ggsave(fname,
width = 6,
height = 2)
}
?scale_x_continuous
plt_bsb <- function(data) {
plt <- data |>
dplyr::group_by(INDICATOR_NAME) |>
dplyr::mutate(mean = mean(DATA_VALUE, na.rm = TRUE),
sd = sd(DATA_VALUE, na.rm = TRUE)) |>
ggplot2::ggplot(ggplot2::aes(x = YEAR,
y = DATA_VALUE
)) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean + .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean - .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_path() +
# ggplot2::xlim(c(1989, 2024)) +
ggplot2::scale_x_continuous(breaks = c(1990, 2000, 2010, 2020, 2023),
limits = c(1989, 2024)) +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_classic(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 16),
axis.title = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 30),
aspect.ratio = 1/4)
return(plt)
}
## plot ----
for(i in unique(all_indicators$INDICATOR_NAME)) {
this_dat <- all_indicators |>
dplyr::filter(INDICATOR_NAME == i) |>
dplyr::arrange(YEAR)
fname <- here::here("images", paste0(i, "_", Sys.Date(), ".png"))
if(max(this_dat$DATA_VALUE, na.rm = TRUE) > 10^6) {
this_dat <- this_dat |>
dplyr::mutate(DATA_VALUE = ifelse(!is.na(DATA_VALUE), DATA_VALUE/10^6, DATA_VALUE),
INDICATOR_NAME = paste(INDICATOR_NAME, "millions"))
fname <-  here::here("images", paste0(i, "_millions_", Sys.Date(), ".png"))
}
print(fname)
fig <- plt_bsb(this_dat)
if(stringr::str_detect(i, "North")) {
fig <- fig +
ggplot2::labs(title = "North") +
ggplot2::theme(plot.title.position = "plot")
}
if(stringr::str_detect(i, "South")) {
fig <- fig +
ggplot2::labs(title = "South") +
ggplot2::theme(plot.title.position = "plot")
}
ggsave(fname,
width = 6,
height = 2)
}
this_dat
plt_bsb(this_dat)
plt_bsb <- function(data) {
plt <- data |>
dplyr::group_by(INDICATOR_NAME) |>
dplyr::mutate(mean = mean(DATA_VALUE, na.rm = TRUE),
sd = sd(DATA_VALUE, na.rm = TRUE)) |>
ggplot2::ggplot(ggplot2::aes(x = YEAR,
y = DATA_VALUE
)) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean + .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean - .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_path() +
# ggplot2::xlim(c(1989, 2024)) +
ggplot2::scale_x_continuous(breaks = c(1990, 2000, 2010, 2020, 2023),
limits = c(1989, 2024)) +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_classic(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 16),
axis.title = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 30,
hjust = -0.5),
aspect.ratio = 1/4)
return(plt)
}
plt_bsb(this_dat)
plt_bsb <- function(data) {
plt <- data |>
dplyr::group_by(INDICATOR_NAME) |>
dplyr::mutate(mean = mean(DATA_VALUE, na.rm = TRUE),
sd = sd(DATA_VALUE, na.rm = TRUE)) |>
ggplot2::ggplot(ggplot2::aes(x = YEAR,
y = DATA_VALUE
)) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean + .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean - .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_path() +
# ggplot2::xlim(c(1989, 2024)) +
ggplot2::scale_x_continuous(breaks = c(1990, 2000, 2010, 2020, 2023),
limits = c(1989, 2024)) +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_classic(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 16),
axis.title = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 30,
hjust = 0.5),
aspect.ratio = 1/4)
return(plt)
}
plt_bsb(this_dat)
plt_bsb <- function(data) {
plt <- data |>
dplyr::group_by(INDICATOR_NAME) |>
dplyr::mutate(mean = mean(DATA_VALUE, na.rm = TRUE),
sd = sd(DATA_VALUE, na.rm = TRUE)) |>
ggplot2::ggplot(ggplot2::aes(x = YEAR,
y = DATA_VALUE
)) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean + .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean - .data$sd
),
color = "darkgreen",
linetype = "solid"
) +
ggplot2::geom_hline(ggplot2::aes(
yintercept = .data$mean
),
color = "darkgreen",
linetype = "dotted"
) +
ggplot2::geom_point() +
ggplot2::geom_path() +
# ggplot2::xlim(c(1989, 2024)) +
ggplot2::scale_x_continuous(breaks = c(1990, 2000, 2010, 2020, 2023),
limits = c(1989, 2024)) +
ggplot2::scale_y_continuous(labels = scales::comma) +
ggplot2::theme_classic(base_size = 16) +
ggplot2::theme(strip.text = ggplot2::element_text(size = 16),
axis.title = ggplot2::element_blank(),
axis.text.x = ggplot2::element_text(angle = 30,
hjust = 1),
aspect.ratio = 1/4)
return(plt)
}
plt_bsb(this_dat)
## plot ----
for(i in unique(all_indicators$INDICATOR_NAME)) {
this_dat <- all_indicators |>
dplyr::filter(INDICATOR_NAME == i) |>
dplyr::arrange(YEAR)
fname <- here::here("images", paste0(i, "_", Sys.Date(), ".png"))
if(max(this_dat$DATA_VALUE, na.rm = TRUE) > 10^6) {
this_dat <- this_dat |>
dplyr::mutate(DATA_VALUE = ifelse(!is.na(DATA_VALUE), DATA_VALUE/10^6, DATA_VALUE),
INDICATOR_NAME = paste(INDICATOR_NAME, "millions"))
fname <-  here::here("images", paste0(i, "_millions_", Sys.Date(), ".png"))
}
print(fname)
fig <- plt_bsb(this_dat)
if(stringr::str_detect(i, "North")) {
fig <- fig +
ggplot2::labs(title = "North") +
ggplot2::theme(plot.title.position = "plot")
ggsave(fname,
width = 7,
height = 2)
} else if(stringr::str_detect(i, "South")) {
fig <- fig +
ggplot2::labs(title = "South") +
ggplot2::theme(plot.title.position = "plot")
ggsave(fname,
width = 7,
height = 2)
} else {
ggsave(fname,
width = 6,
height = 2)
}
}
com_indicators <- readxl::read_excel(here::here("data-raw/commercial_data/SOCIEOECONOMIC_COMMERCIAL_INDICATORS_FINAL.xls"))
all_indicators <- dplyr::bind_rows(
rec_indicators,
com_indicators,
swv,
temp_indicator
)
## plot ----
for(i in unique(all_indicators$INDICATOR_NAME)) {
this_dat <- all_indicators |>
dplyr::filter(INDICATOR_NAME == i) |>
dplyr::arrange(YEAR)
fname <- here::here("images", paste0(i, "_", Sys.Date(), ".png"))
if(max(this_dat$DATA_VALUE, na.rm = TRUE) > 10^6) {
this_dat <- this_dat |>
dplyr::mutate(DATA_VALUE = ifelse(!is.na(DATA_VALUE), DATA_VALUE/10^6, DATA_VALUE),
INDICATOR_NAME = paste(INDICATOR_NAME, "millions"))
fname <-  here::here("images", paste0(i, "_millions_", Sys.Date(), ".png"))
}
print(fname)
fig <- plt_bsb(this_dat)
if(stringr::str_detect(i, "North")) {
fig <- fig +
ggplot2::labs(title = "North") +
ggplot2::theme(plot.title.position = "plot")
ggsave(fname,
width = 7,
height = 2)
} else if(stringr::str_detect(i, "South")) {
fig <- fig +
ggplot2::labs(title = "South") +
ggplot2::theme(plot.title.position = "plot")
ggsave(fname,
width = 7,
height = 2)
} else {
ggsave(fname,
width = 6,
height = 2)
}
}
quarto install tinytex
install.packages('tinytex')
tinytex::install_tinytex()
